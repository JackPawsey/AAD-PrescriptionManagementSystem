// <auto-generated />
using System;
using AADWebApp.Areas.Identity.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AADWebApp.Migrations
{
    [DbContext(typeof(AuthDbContext))]
    [Migration("20210217121736_SeedUserDetails")]
    partial class SeedUserDetails
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AADWebApp.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("GeneralPractioner")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NHSNumber")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "be2497f5-ab1f-4824-9a94-a14747bcccd7",
                            AccessFailedCount = 0,
                            City = "Nottingham",
                            ConcurrencyStamp = "929d9063-e187-4722-80d0-642bb2d3f1a5",
                            Email = "cloudcrusaderssystems@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Demo",
                            GeneralPractioner = "Steve",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NHSNumber = "1",
                            NormalizedEmail = "CLOUDCRUSADERSSYSTEMS@GMAIL.COM",
                            NormalizedUserName = "CLOUDCRUSADERSSYSTEMS@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKgc3PLBb2RqvgOfg2yCY86mVqsE0VRnkKcBMXv96x4OhO6SgeyX2iqpo1e3NCq/7g==",
                            PhoneNumber = "07123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "795ab7c3-3211-4d41-8ece-2ef59fd21c26",
                            TwoFactorEnabled = false,
                            UserName = "cloudcrusaderssystems@gmail.com"
                        },
                        new
                        {
                            Id = "fd064d4e-7457-4287-a3f4-5b99580ef2ab",
                            AccessFailedCount = 0,
                            City = "Nottingham",
                            ConcurrencyStamp = "2ffb4353-0f4e-4e72-8d07-71e4eaad7c18",
                            Email = "cloudcrusaderssystems+pharmacist@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Demo",
                            GeneralPractioner = "Steve",
                            LastName = "Pharmacist",
                            LockoutEnabled = false,
                            NHSNumber = "2",
                            NormalizedEmail = "CLOUDCRUSADERSSYSTEMS+PHARMACIST@GMAIL.COM",
                            NormalizedUserName = "CLOUDCRUSADERSSYSTEMS+PHARMACIST@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELGNBl7aWgSQBAk1XZZvt5648e0+FxB3gav1roqX2QG2+YCVbzWGGlyjibpuiKjT3A==",
                            PhoneNumber = "07123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2f2bf165-0e0a-44ef-bf80-05f2b94bcc4b",
                            TwoFactorEnabled = false,
                            UserName = "cloudcrusaderssystems+pharmacist@gmail.com"
                        },
                        new
                        {
                            Id = "01734a51-05b1-4c95-8d21-6820014332e9",
                            AccessFailedCount = 0,
                            City = "Nottingham",
                            ConcurrencyStamp = "0230274e-b72b-4de0-949f-ec7ad20cd250",
                            Email = "cloudcrusaderssystems+technician@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Demo",
                            GeneralPractioner = "Steve",
                            LastName = "Technician",
                            LockoutEnabled = false,
                            NHSNumber = "3",
                            NormalizedEmail = "CLOUDCRUSADERSSYSTEMS+TECHNICIAN@GMAIL.COM",
                            NormalizedUserName = "CLOUDCRUSADERSSYSTEMS+TECHNICIAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAIX9I0tPxcBVHKaAvw1aBK2/kMcaaiZ1Ws5a6EbB/bW/30vdj9tn28k4dB45++OpQ==",
                            PhoneNumber = "07123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9d2902a0-0935-4556-9b3b-df17d61a6e02",
                            TwoFactorEnabled = false,
                            UserName = "cloudcrusaderssystems+technician@gmail.com"
                        },
                        new
                        {
                            Id = "c299b237-a197-454d-b474-587e7fe61656",
                            AccessFailedCount = 0,
                            City = "Nottingham",
                            ConcurrencyStamp = "1f19d16e-0ea8-42a4-914a-2a0ecf9ce8b0",
                            Email = "cloudcrusaderssystems+general.practitioner@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Demo",
                            GeneralPractioner = "Steve",
                            LastName = "G.P",
                            LockoutEnabled = false,
                            NHSNumber = "4",
                            NormalizedEmail = "CLOUDCRUSADERSSYSTEMS+GENERAL.PRACTITIONER@GMAIL.COM",
                            NormalizedUserName = "CLOUDCRUSADERSSYSTEMS+GENERAL.PRACTITIONER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDPYxWUc2MU3/FNLN0vFi+6Sb5G58q/KGJ59pCYj1VUI8B1rUMM2SCrt7vEW1x24zQ==",
                            PhoneNumber = "07123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cb92f124-69a5-49d6-bf2c-294c00ed04fd",
                            TwoFactorEnabled = false,
                            UserName = "cloudcrusaderssystems+general.practitioner@gmail.com"
                        },
                        new
                        {
                            Id = "250f3fea-59bd-4f65-ba6a-a08b7afad55a",
                            AccessFailedCount = 0,
                            City = "Nottingham",
                            ConcurrencyStamp = "5afd50d1-7629-464a-a38b-1e8a23641367",
                            Email = "cloudcrusaderssystems+patient@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Demo",
                            GeneralPractioner = "Steve",
                            LastName = "Patient",
                            LockoutEnabled = false,
                            NHSNumber = "5",
                            NormalizedEmail = "CLOUDCRUSADERSSYSTEMS+PATIENT@GMAIL.COM",
                            NormalizedUserName = "CLOUDCRUSADERSSYSTEMS+PATIENT@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELNYOmNiLO/773i7jdycDrdjBfZ9z/Lyu97hmgObka5O4koEZZqkU2T511QMwE6s9Q==",
                            PhoneNumber = "07123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7519ce4a-a06c-4adb-8985-77827c135451",
                            TwoFactorEnabled = false,
                            UserName = "cloudcrusaderssystems+patient@gmail.com"
                        },
                        new
                        {
                            Id = "33a728ad-f9f0-414b-a0d7-4d3cda8dbd6b",
                            AccessFailedCount = 0,
                            City = "Nottingham",
                            ConcurrencyStamp = "dbf3eed0-5bb5-4d07-8b20-be58c93f231c",
                            Email = "cloudcrusaderssystems+authorised.carer@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Demo",
                            GeneralPractioner = "Steve",
                            LastName = "Authorised Carer",
                            LockoutEnabled = false,
                            NHSNumber = "6",
                            NormalizedEmail = "CLOUDCRUSADERSSYSTEMS+AUTHORISED.CARER@GMAIL.COM",
                            NormalizedUserName = "CLOUDCRUSADERSSYSTEMS+AUTHORISED.CARER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBMKd5esBy5+lg+xCQ0K3j4IeyavWznMSJsKPyaMuhMGLeZHgx5ySe0tiY2maYW0Uw==",
                            PhoneNumber = "07123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4eb93520-c34d-4718-9308-87e81d99f017",
                            TwoFactorEnabled = false,
                            UserName = "cloudcrusaderssystems+authorised.carer@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "a0abf262-1a77-4b9d-bac5-ec293928f9ae",
                            ConcurrencyStamp = "113d2740-b2ad-46e9-aa7c-18ab43b82ee6",
                            Name = "Pharmacist",
                            NormalizedName = "PHARMACIST"
                        },
                        new
                        {
                            Id = "5cf92bcd-61c7-40be-bf40-857cd7e94679",
                            ConcurrencyStamp = "7518c7b2-1909-4cd3-8c5c-dd98e97eed91",
                            Name = "Technician",
                            NormalizedName = "TECHNICIAN"
                        },
                        new
                        {
                            Id = "dac4ae7a-4b01-4865-8f3d-66e4cb0bdb42",
                            ConcurrencyStamp = "7968a070-4691-4fe8-8f40-5eca177b88b2",
                            Name = "General Practitioner",
                            NormalizedName = "GENERAL PRACTITIONER"
                        },
                        new
                        {
                            Id = "7bdb12d3-caf8-4d43-a2e9-ef6ebe8f4b31",
                            ConcurrencyStamp = "fb6dff4f-cdf5-4792-9894-5fefb6cdae0f",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "89363d4b-e187-4c02-8959-c3fa597d0846",
                            ConcurrencyStamp = "dae2d224-3c93-46a4-9156-79e979b76cb2",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        },
                        new
                        {
                            Id = "4d2715ee-88a0-4631-8339-cf24311bafbc",
                            ConcurrencyStamp = "6c1bab71-343d-4d75-b3ae-767b603fadd1",
                            Name = "Authorised Carer",
                            NormalizedName = "AUTHORISED CARER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "be2497f5-ab1f-4824-9a94-a14747bcccd7",
                            RoleId = "7bdb12d3-caf8-4d43-a2e9-ef6ebe8f4b31"
                        },
                        new
                        {
                            UserId = "fd064d4e-7457-4287-a3f4-5b99580ef2ab",
                            RoleId = "a0abf262-1a77-4b9d-bac5-ec293928f9ae"
                        },
                        new
                        {
                            UserId = "01734a51-05b1-4c95-8d21-6820014332e9",
                            RoleId = "5cf92bcd-61c7-40be-bf40-857cd7e94679"
                        },
                        new
                        {
                            UserId = "c299b237-a197-454d-b474-587e7fe61656",
                            RoleId = "dac4ae7a-4b01-4865-8f3d-66e4cb0bdb42"
                        },
                        new
                        {
                            UserId = "250f3fea-59bd-4f65-ba6a-a08b7afad55a",
                            RoleId = "89363d4b-e187-4c02-8959-c3fa597d0846"
                        },
                        new
                        {
                            UserId = "33a728ad-f9f0-414b-a0d7-4d3cda8dbd6b",
                            RoleId = "4d2715ee-88a0-4631-8339-cf24311bafbc"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AADWebApp.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AADWebApp.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AADWebApp.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AADWebApp.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
